import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

import { AuthProvider } from "@/context/AuthContext";
import { getBearerToken } from "@/lib/session";
import { User, UserSchema } from "@/lib/schemas.server";
import { Toaster } from "@/components/ui/sonner";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

async function getCurrentUser(): Promise<User | null> {
  const token = await getBearerToken();
  if (!token) {
    return null;
  }

  try {
    const response = await fetch(
      `${process.env.NEXT_PUBLIC_API_BASE_URL}/users/me`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
        cache: "no-store", // Ensure fresh data
      }
    );

    if (!response.ok) {
      console.error("Failed to fetch user");

      return null;
    }

    const data = await response.json();

    // Validate the response against our Zod schema
    const parsedUser = UserSchema.safeParse(data);

    if (!parsedUser.success) {
      console.error("User data validation failed:", parsedUser.error);
      return null;
    }

    return parsedUser.data;
  } catch (error) {
    console.error("Error fetching current user:", error);
    return null;
  }
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const user = await getCurrentUser();
  return (
    <html lang="en" className="dark">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <AuthProvider initialUser={user}>
          <main>{children}</main>
          <Toaster />
        </AuthProvider>
      </body>
    </html>
  );
}
